SET Total Floor = 66
SET Total column = 4
SET NbElevator IN EACH Column To 3
SET MaxWorkLoadLimit = 2500
SET MaxLoadLimit = 3000
SET Default Floor RC = 7
SET ColumnRange 1 = 7 to 1
Set ColumnRange 2 = 7 to 26
Set ColumnRange 3 = 7 skip to 26 to 46
Set ColumnRange 4 = 7 skip to 46 to 66
 


WHILE Controler IS On
    READ EACH Button IN Buttons
    IF Button IS Pressed THEN
        CALL ButtonPressed (Button)
    CALL VerifyWeight
    
    CALL VerifyDestinationList
    CALL CheckMovingElevator
END WHILE

SEQUENCE VerifyWeight
        FOR EACH Elevator In Elevators
            READ Load
            IF ActLoad > ElevWorkLoadLimit THEN
                SET LoadError TO 1 // Continue to move don't stop for new people
            ELSE IF ActLoad > ElevMaxLoadLimit Then
                SET LoadError TO 2 // Stopped untill extra load is removed
            Else
                SET LoadError TO 0
            END IF
END SEQUENCE

    
    
    
SEQUENCE ButtonPressed (Button)
    IF Button Action IS CallElevator THEN
        CALL CallElevator (ButtonDirection, ButtonFloor, GoingIn)
		SET Button Active
    ELSE IF Button Action IS SendRequestToElev THEN
        IF CALL CheckDestExist (ButtonFloor, ButtonElevator) RETURNING FALSE THEN 
            CALL SendRequestToElev (RequestedFloor, Elevator, GoingOut)
			SET Button Active
    ELSE IF Action IS OpenDoor THEN
        CALL OpenDoor(Elevator, Floor)
    ELSE IF Action IS CloseDoor THEN
        Call CloseDoor(Elevator, Floor)
    END IF
END SEQUENCE

SEQUENCE CallElevator (Direction, RequestedFloor, IsGoingInOrOut)
    CALL FindElevator (Direction, Floor, Column) RETURNING Elevator
    IF CALL CheckDestExist (RequestedFloor, Elevator) RETURNING FALSE THEN 
        CALL SendRequestToElev (Elevator, RequestedFloor, IsGoingInOrOut)
END SEQUENCE


SEQUENCE ClearRequestElevButton (Direction, RequestedFloor)
    CALL FindRequestElevButton (ActualFloor) RETURNING Button
    SET Button Deactive
END SEQUENCE

SEQUENCE ClearGoToFloorButton (Elevator, Floor)
    CALL FindActiveGoToFloorButton (Elevator, Floor) RETURNING Button
    SET Button Inactive
END SEQUENCE

SEQUENCE FindRequestElevButton (ActualFloor)
    FOR EACH RequestElevButton IN RequestElevButtons
        IF ActualFloor = ButtonFloor AND Direction = ButtonDirection THEN 
            RETURN Button
    END FOR
END SEQUENCE

SEQUENCE FindGoToFloorButton (Elevator, Floor)
    FOR EACH ActiveGoToFloorButton IN ActiveGotoFloorButtons
        IF ActualFloor = ActiveButtonFloor AND Direction = ActiveButtonDirection THEN 
            RETURN Button
    END FOR
END SEQUENCE

SEQUENCE FindActiveGoToFloorButton (Elevator, Floor)
    FOR EACH ActiveGoToFloorButton IN ActiveGoToFloorButtons
        IF ElevatorFloor = ActiveGoToFloorButtonFloor THEN 
            RETURN Button
    END FOR
END SEQUENCE


SEQUENCE CheckDestExist (Floor, Elevator)
    FOR Each Destination IN ElevatorDestinationList
        IF Destination = Floor Then
            RETURN TRUE
    END FOR
    RETURN FALSE
END SEQUENCE


SEQUENCE FindElevator (Direction, Floor, Column)
    FOR EACH Column IN Columns
        IF RequestedFloor IS IN CollumnRange
        
            FOR EACH Elevator IN Elevators
                COMPUTE ActualGap as ABSOLUTE OF ActualFloor - Floor
                COMPUTE ListLenght as Lenght OF PositionList
        
                IF RequestedFloor = ActualFloor THEN
                    IF (Status IS Stopped AND Direction = RequestedDirection) OR (Status IS Idle) THEN
                        RETURN Elevator


                ELSE IF (RequestedFloor > ActualFloor AND Direction IS Up AND RequestedDirection IS Up) OR (RequestedFloor < ActualFloor AND Direction IS Down AND RequestedDirection IS Down) THEN
                    IF Status IS Moving OR Stopped THEN
                        Return Elevator

                ELSE IF Status IS Idle THEN
                    RETURN Elevator
                END IF
            END FOR
        END IF
    END FOR

    
    CALL  NearestElevator(RequestedFloor, RequestedDirection) RETURNING ElevWithShortestGap
    IF ElevWithShortestGap NOT EMPTY THEN
        RETURN ElevWithShortestGap
    
    ELSE
        CALL ShortestFloorList RETURNING ElevWithShortestList 
        RETURN ElevWithShortestList
    END IF

    
END SEQUENCE


SEQUENCE ShortestFloorList ()
    SET Lenght TO 999999
    FOR EACH Elevator IN Elevators
        IF Lenght > COMPUTE Lenght OF ElevatorDestinationList THEN
            SET Lenght TO COMPUTE Lenght OF ElevatorDestinationList
            SET ElevWithShortestList TO Elevator
		END IF
    END FOR
    RETURN ElevWithShortestList
END SEQUENCE

SEQUENCE NearestElevator(RequestedFloor, RequestedDirection)
    SET Gap TO 999999
    FOR EACH Elevator IN Elevators
        IF Gap > COMPUTE ABSOLUTE OF ActualFloor - RequestedFloor THEN
            IF (RequestedFloor > ActualFloor AND Direction IS Up AND RequestedDirection IS Up) OR (RequestedFloor < ActualFloor AND Direction IS Down AND RequestedDirection IS Down)
                SET Gap To Compute ABSOLUTE OF ActualFloor - Floor
                SET ElevatorWithShortestGap TO Elevator
            END IF
        END IF
    END FOR
    RETURN ElevWithShortestGap
END SEQUENCE

SEQUENCE VerifyElevatorDestinationList
    FOR EACH Elevator IN Elevator
        IF First Destination IN Destination NOT EMPTY THEN
            IF LoadError <> 2 THEN
                IF LoadError = 1 THEN
                    IF ElevatorDestinationList IsGoingInOrOut IS GoingOut THEN
                        CALL StartMove (Elevator)
                    ELSE
                        SET DestinationTemp TO First FROM ElevatorDestinationList
                        SET IsGoingInOrOutTemp TO First FROM ElevatorDestinationList
                        DELETE First Destination FROM ElevatorDestinationList
                        DELETE First IsGoingInOrOut FROM ElevatorDestinationList
                        CALL FindElevator (ElevatorDirection, DestinationTemp) RETURNING NewElevator
                        CALL SendRequestToElev (DestinationTemp, NewElevator, IsGoingInOrOutTemp)
                    END IF
				END IF
                CALL StartMove (Elevator)
            ELSE
                CALL OpenDoor (Elevator)
            END IF
        END IF
    END FOR
END SEQUENCE

SEQUENCE StartMove (Elevator)
    IF ActualFloor < FirstDestination IN SortFloorList THEN
        Direction = Up
    ELSE
        Direction = Down
    END IF
    Status = Moving
    Start Move to FirstDestination IN SortFloorList
END SEQUENCE


SEQUENCE SendRequestToElev (Elevator, RequestedFloor, IsGoingInOrOut)
    ADD RequestedFloor TO FloorList
    ADD IsGoingInOrOut AT Position IN ElevatorDestinationList
    CALL SortFloorList (FloorList) RETURNING SortedFloorList
    SET FloorList TO SortedFloorList
END SEQUENCE

SEQUENCE SortFloorList (FloorList)
    TRI = ActualFloor
END SEQUENCE


SEQUENCE OperateElevator (Elevator, RequestedFloor)
    READ RequestedFloor FROM FloorList
    IF ActualFloor IS RequestedFloor THEN
        CALL StopElevator (Elevator)
        CALL OpenDoor (Elevator)
        
    ELSE IF ActualFloor > RequestedFloor THEN
        CALL StartMove (Elevator)
        CALL MoveDown (Elevator, Floor)
        
    ELSE IF ActualFloor < RequestedFloor THEN
        CALL StartMove (Elevator)
        CALL MoveUp (Elevator, Floor)
    END IF
END SEQUENCE

SEQUENCE CheckMovingElevator
    FOR EACH Elevator IN Elevators
        IF Status IS Moving THEN
            READ Actual Floor
            IF Elevator actualFloor <> ActualFloor THEN
                ActualFloor = Floor Level
            END IF
            IF Elevator ActualFloor = First Destination IN Elevator SortFloorList THEN
                CALL StopElevator(Elevator)
                CALL ClearRequestElevButton (Elevator)
                CALL ClearGoToFloorButton (Elevator)
            END IF
        END IF
        IF Status IS Stopped THEN
            CALL OpenDoor(Elevator)
		END IF
    END FOR
END SEQUENCE


SEQUENCE MoveUp (Elevator, RequestedFloor)
    REPEAT
        COMPUTE ActualFloor = RequestedFloor - 1
        SHOW ActualFloor
    UNTIL ActualFloor IS RequestedFloor
    CALL SendRequestToElev (Elevator, RequestedFloor)
END SEQUENCE

SEQUENCE MoveDown (Elevator, RequestedFloor)
    REPEAT
        COMPUTE ActualFloor = RequestedFloor + 1
        SHOW ActualFloor
    UNTIL ActualFloor IS RequestedFloor
    CALL SendRequestToElev (Elevator, RequestedFloor)
END SEQUENCE

SEQUENCE StopElevator(Elevator)
    Stop Elevator
    INIT Timer TO 2 seconds
    Status = Stopped
END SEQUENCE

SEQUENCE OpenDoor (Elevator, Floor)
	CALL ClearRequestElevButton (Direction, RequestedFloor)
	CALL ClearGoToFloorButton (Elevator, Floor)
    REPEAT
        OpenDoor 
        INIT Timer TO 5 seconds
    UNTIL Door IS NotObstruct
    CALL CloseDoor (Elevator, Floor)
END SEQUENCE


SEQUENCE CloseDoor (Elevator, Floor)
    IF Door IS Closing AND NotObstruct THEN 
		CALL OperateElevator (Elevator, Floor)
    ELSE 
		CALL OpenDoor (Elevator, Floor)
	END IF 
END SEQUENCE



SEQUENCE SortFloorList (FloorList, ElevatorDirection)
    IF ElevatorDirection IS GoingUp THEN
        ListLength = length(FloorList)
        REPEAT
            newListLength = 0
            FOR index = 1 TO ListLength-1 inclusive DO
                if FloorList[index] > FloorList[index+1] then
                    swap( FloorList[index], FloorList[index+1] )
                    newListLength = index
                END IF
            END FOR
            ListLength = newListLength
        UNTIL ListLength = 0
		RETURN SortFloorList
   
   ELSE IF ElevatorDirection IS GoingDown THEN
      ListLength = length(A)
        REPEAT
            newListLength = 0
            FOR index = 1 TO ListLength-1 inclusive DO
                if FloorList[index] < FloorList[index+1] then
                    swap( FloorList[index], FloorList[index+1] )
                    newListLength = index
                END IF
            END FOR
            ListLength = newListLength
        UNTIL ListLength = 0
		RETURN SortFloorList
   END IF
END SEQUENCE